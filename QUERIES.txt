LESSON 1

-- SELECT Title FROM movies;
-- SELECT Director From Movies
-- SELECT Director,Title FROM Movies;
-- SELECT Title,Year FROM Movies;
SELECT * FROM Movies;


LESSON 2

-- SELECT * FROM movies Where Id=6;
-- SELECT * FROM Movies Where Year Between 2000 AND 2010;
-- SELECT * FROM Movies Where Year NOT Between 2000 AND 2010;
SELECT * FROM Movies WHERE Id<6;

LESSON 3

-- SELECT * FROM movies WHERE Title Like "Toy%";
-- SELECT * FROM Movies Where Director="John Lasseter";
-- SELECT Title,Director FROM Movies Where Director!="John Lasseter";
SELECT * FROM Movies Where Title Like "WALL-%"


LESSON 4

-- SELECT distinct Director FROM movies order by Director ;
-- SELECT * FROM movies order by year desc limit 4;
-- SELECT * FROM movies order by Title limit 5;
SELECT * FROM movies order by Title limit 5 offset 5;

LESSON 5

-- SELECT * FROM north_american_cities where Country="Canada";
-- SELECT * FROM north_american_cities where Country="United States" order by latitude desc;
-- SELECT * FROM north_american_cities where longitude<-87.629798 order by longitude ;
-- SELECT * FROM north_american_cities where Country="Mexico" order by Population desc limit 2;
SELECT * FROM north_american_cities where Country="United States" order by Population desc limit 2 offset 2;

LESSON 6

SELECT  * FROM movies inner join Boxoffice on Movies.Id=Boxoffice.Movie_id ;

SELECT  * FROM movies inner join Boxoffice on Movies.Id=Boxoffice.Movie_id where Domestic_sales<International_sales; 

SELECT  * FROM movies inner join Boxoffice on Movies.Id=Boxoffice.Movie_id order by Rating desc;


LESSON 7

-- SELECT Distinct Building FROM employees left join Buildings on employees.Building=Buildings.Building_name;
-- SELECT * from Buildings;
SELECT DISTINCT Building_name,Role FROM Buildings left join Employees on employees.Building=Buildings.Building_name;

LESSON 8

-- SELECT * FROM Employees left join Buildings on employees.Building=Buildings.Building_name WHERE Building IS NULL;
SELECT * FROM Buildings left join Employees on employees.Building=Buildings.Building_name WHERE Name IS NULL;

LESSON 9
SELECT TITLE,(Domestic_sales+International_sales)/1000000 AS combined_sales FROM movies LEFT JOIN Boxoffice on Movies.Id=Boxoffice.Movie_id;

SELECT Title,(Rating*10) As ratings_percent FROM movies LEFT JOIN Boxoffice on Movies.Id=Boxoffice.Movie_id;

SELECT Title,year FROM movies LEFT JOIN Boxoffice on Movies.Id=Boxoffice.Movie_id where (year%2==0);



LESSON 10
SELECT Name,Max(Years_employed) FROM employees;
select Role,AVG(Years_employed) AS Average_number_of_years from employees GROUP BY Role;
select Building,SUM(Years_employed) As Total_Number_of_employees from Employees GROUP BY Building  ;


LESSON 11
SELECT Role,count(Name) AS Number_of_Artists FROM employees where Role="Artist";
SELECT Role, count(Name) From Employees Group By Role;
SELECT Role,SUM(years_employed) FROM EMPLOYEES Where Role="Engineer";


LESSON 12
SELECT Director, COUNT(Title) FROM movies Group By Director;
SELECT DIRECTOR,SUM(Domestic_sales+International_sales)  FROM Movies LEFT JOIN Boxoffice on Movies.Id=Boxoffice.Movie_Id GROUP BY Director;

LESSON 13
INSERT INTO movies (Title, Director, Year, Length_minutes)
VALUES ('Toy Story 4', 'Josh Cooley', 2019, 1000);

INSERT INTO Boxoffice (Movie_id,Rating,Domestic_sales,International_sales) VALUES(15,8.7,340000000,270000000)



LESSON 14

UPDATE Movies SET Director="John Lasseter" where Title="A Bug's Life"

UPDATE Movies SET Year="1999" where Title="Toy Story 2"

UPDATE Movies SET Title="Toy Story 3",Director="Lee Unkrich" Where Title="Toy Story 8"

LESSON 15

Delete From Movies where Year<2005;

Delete From Movies Where Director="Andrew Stanton"

LESSON 16

CREATE TABLE Database (id INTEGER PRIMARY KEY, Name TEXT, Version FLOAT,Download_count INTEGER);

LESSON 17

ALTER TABLE Movies ADD Aspect_ratio FLOAT;

ALTER TABLE Movies ADD Language TEXT DEFAULT "English";

LESSON 18

DROP TABLE Movies;

DROP TABLE BoxOffice

